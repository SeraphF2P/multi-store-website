// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

enum Role {
  guest
  seller
  admin
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  password      String?
  accounts      Account[]
  sessions      Session[]
  stores        Store[]
  role          Role      @default(guest)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id         String      @id @default(uuid())
  name       String      @unique
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String   @id @default(uuid())
  storeId    String
  store      Store    @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageName  String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id        String      @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard Billboard[]
  name      String
  products  Product[]   @relation("CategoryToProduct")
  colors    Color[]     @relation("CategoryToColor")
  sizes     Size[]      @relation("CategoryToSize")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([storeId])
}

model Product {
  id         String   @id @default(uuid())
  name       String
  storeId    String // Foreign Key to Store
  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String // Foreign Key to Category
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id], onDelete: Cascade)
  isFeatured Boolean  @default(false)
  isApproved Boolean  @default(false)
  price      Int 
  sizeId     String
  size       Size     @relation(fields: [sizeId], references: [id])
  groupId    Int   @default(autoincrement())
  colorId    String
  color      Color    @relation(fields: [colorId], references: [id])
  imageId    String
  image      Image   @relation(fields: [imageId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([groupId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order  @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product

  @@index([orderId])
  @@index([productId])
}

model Size {
  id         String    @id @default(uuid())
  categoryId String // Foreign Key to Category
  category   Category  @relation("CategoryToSize", fields: [categoryId], references: [id])
  name       String
  value      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  products    Product[]

  @@index([categoryId])
}



model Color {
  id         String    @id @default(uuid())
  categoryId String // Foreign Key to Category
  category   Category  @relation("CategoryToColor", fields: [categoryId], references: [id])
  name       String
  value      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  products    Product[]

  @@index([categoryId])
}

model Image {
  id        String    @id @default(uuid())
  imageName String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
}
